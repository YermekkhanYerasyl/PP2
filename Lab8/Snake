import pygame
import sys
import random
from pygame.locals import *

# Initialize Pygame
pygame.init()

# Set up FPS controller
FPS = 15  # Initial frames per second (speed of the snake)
fpsClock = pygame.time.Clock()

# Screen dimensions
SCREEN_WIDTH = 600
SCREEN_HEIGHT = 400
BLOCK_SIZE = 20  # Size of each snake/food block

# Define colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)

# Set up the display
DISPLAYSURF = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Snake Game")

# Font for text rendering
font = pygame.font.SysFont("Verdana", 20)

# Game variables
SCORE = 0  # Tracks eaten food
LEVEL = 1  # Current level
FOOD_PER_LEVEL = 3  # Number of food to eat to level up
SPEED_INCREMENT = 5  # FPS increase per level
INITIAL_FPS = 15  # Store initial FPS for restart

# Snake class
class Snake:
    def __init__(self):
        self.position = [SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2]  # Start in the middle
        self.body = [self.position.copy()]  # List of snake segments
        self.direction = "RIGHT"  # Initial direction (won't move until commanded)
        self.change_to = None  # No direction change until player input

    def change_direction(self):
        # Only update direction if a change has been commanded
        if self.change_to:
            if self.change_to == "UP" and self.direction != "DOWN":
                self.direction = "UP"
            if self.change_to == "DOWN" and self.direction != "UP":
                self.direction = "DOWN"
            if self.change_to == "LEFT" and self.direction != "RIGHT":
                self.direction = "LEFT"
            if self.change_to == "RIGHT" and self.direction != "LEFT":
                self.direction = "RIGHT"

    def move(self, food_pos):
        # Update head position based on direction (only if direction is set)
        if self.direction == "UP" and self.change_to:  # Only move if started
            self.position[1] -= BLOCK_SIZE
        if self.direction == "DOWN" and self.change_to:
            self.position[1] += BLOCK_SIZE
        if self.direction == "LEFT" and self.change_to:
            self.position[0] -= BLOCK_SIZE
        if self.direction == "RIGHT" and self.change_to:
            self.position[0] += BLOCK_SIZE

        # Add new head to body
        self.body.insert(0, self.position.copy())

        # Check if snake ate food
        if self.position == food_pos:
            return True  # Food eaten
        else:
            self.body.pop()  # Remove tail if no food eaten
            return False

    def check_collision(self):
        # Check border collision
        if (self.position[0] < 0 or self.position[0] >= SCREEN_WIDTH or
            self.position[1] < 0 or self.position[1] >= SCREEN_HEIGHT):
            return True  # Hit the wall
        # Check collision with self
        for segment in self.body[1:]:
            if self.position == segment:
                return True  # Hit itself
        return False

# Food class
class Food:
    def __init__(self, snake):
        self.spawn_food(snake)  # Initial food spawn

    def spawn_food(self, snake):
        # Generate random position, avoiding snake body and walls
        while True:
            x = random.randrange(0, SCREEN_WIDTH, BLOCK_SIZE)
            y = random.randrange(0, SCREEN_HEIGHT, BLOCK_SIZE)
            # Ensure food doesn't spawn on snake or outside playable area
            if ([x, y] not in snake.body and
                x >= 0 and x < SCREEN_WIDTH and
                y >= 0 and y < SCREEN_HEIGHT):
                self.position = [x, y]
                break

# Function to reset the game state
def reset_game():
    global SCORE, LEVEL, FPS, snake, food
    SCORE = 0  # Reset score
    LEVEL = 1  # Reset level
    FPS = INITIAL_FPS  # Reset speed to initial FPS
    snake = Snake()  # Create new snake instance
    food = Food(snake)  # Create new food instance
    return snake, food

# Initialize game objects
snake = Snake()
food = Food(snake)

# Game loop
game_active = True  # Flag to track if game is active or in game-over state
game_started = False  # Flag to track if player has started moving
while True:
    # Event handling
    for event in pygame.event.get():
        if event.type == QUIT:
            pygame.quit()
            sys.exit()
        elif event.type == KEYDOWN:
            if game_active:
                # Start game or change direction only when a key is pressed
                if event.key in (K_UP, K_DOWN, K_LEFT, K_RIGHT):
                    if not game_started:
                        game_started = True  # Start game on first movement
                    if event.key == K_UP:
                        snake.change_to = "UP"
                    elif event.key == K_DOWN:
                        snake.change_to = "DOWN"
                    elif event.key == K_LEFT:
                        snake.change_to = "LEFT"
                    elif event.key == K_RIGHT:
                        snake.change_to = "RIGHT"
            else:  # In game-over state, check for restart
                if event.key == K_r:
                    snake, food = reset_game()  # Reset game state
                    game_active = True  # Restart game
                    game_started = False  # Reset start flag

    if game_active and game_started:  # Only update game if started
        # Update snake direction
        snake.change_direction()

        # Move snake and check for food collision
        food_eaten = snake.move(food.position)
        if food_eaten:
            SCORE += 1  # Increase score
            food.spawn_food(snake)  # Spawn new food

            # Check for level up
            if SCORE % FOOD_PER_LEVEL == 0:
                LEVEL += 1  # Increase level
                FPS += SPEED_INCREMENT  # Increase speed

        # Check for collision (wall or self)
        if snake.check_collision():
            game_active = False  # End active gameplay

    # Draw everything
    DISPLAYSURF.fill(BLACK)  # Clear screen with black

    if game_active:
        # Draw snake
        for pos in snake.body:
            pygame.draw.rect(DISPLAYSURF, GREEN, (pos[0], pos[1], BLOCK_SIZE, BLOCK_SIZE))

        # Draw food
        pygame.draw.rect(DISPLAYSURF, RED, (food.position[0], food.position[1], BLOCK_SIZE, BLOCK_SIZE))

        # Show start prompt if game hasn't started
        if not game_started:
            start_text = font.render("Press an arrow key to start", True, WHITE)
            DISPLAYSURF.blit(start_text, (SCREEN_WIDTH // 4, SCREEN_HEIGHT // 2))
    else:
        # Display game over screen with restart prompt
        game_over_text = font.render(f"Game Over! Score: {SCORE}", True, RED)
        restart_text = font.render("Press R to Restart", True, WHITE)
        DISPLAYSURF.blit(game_over_text, (SCREEN_WIDTH // 4, SCREEN_HEIGHT // 2 - 20))
        DISPLAYSURF.blit(restart_text, (SCREEN_WIDTH // 4, SCREEN_HEIGHT // 2 + 20))

    # Display score and level (always visible)
    score_text = font.render(f"Score: {SCORE}", True, WHITE)
    level_text = font.render(f"Level: {LEVEL}", True, WHITE)
    DISPLAYSURF.blit(score_text, (10, 10))  # Top left
    DISPLAYSURF.blit(level_text, (SCREEN_WIDTH - 100, 10))  # Top right

    # Update display and control FPS
    pygame.display.update()
    fpsClock.tick(FPS)