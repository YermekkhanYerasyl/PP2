import pygame
import sys
from pygame.locals import *
import random
import time

# Initialize Pygame
pygame.init()

# Set up FPS (Frames Per Second)
FPS = 60

# Define colors
BLUE = (0, 0, 255)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)

# Screen dimensions
SCREEN_WIDTH = 400
SCREEN_HEIGHT = 600

# Game variables
SPEED = 5
SCORE = 0  # Player's score (enemies dodged)
COINS = 0  # Number of collected coins

# Set up fonts
font = pygame.font.SysFont("Verdana", 60)
font_small = pygame.font.SysFont("Verdana", 20)
game_over = font.render("Game Over", True, BLACK)

# Load background image
background = pygame.image.load("AnimatedStreet.png").convert_alpha()

# Create the display surface
DISPLAYSURF = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
DISPLAYSURF.fill(WHITE)
pygame.display.set_caption("Racer")

# Define the Enemy class (inherits from Sprite)
class Enemy(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pygame.image.load("Enemy.png")  # Load enemy image
        self.rect = self.image.get_rect()  # Get rectangle for collision detection
        self.rect.center = (random.randint(40, SCREEN_WIDTH - 40), 0)  # Start at random x, top of screen

    def move(self):
        global SCORE
        self.rect.move_ip(0, SPEED)  # Move enemy downward
        if self.rect.top > SCREEN_HEIGHT:  # If enemy goes off screen
            SCORE += 1  # Increase score
            self.rect.top = 0  # Reset to top
            self.rect.center = (random.randint(40, SCREEN_WIDTH - 40), 0)  # New random x position

# Define the Player class (inherits from Sprite)
class Player(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pygame.image.load("Player.png")  # Load player image
        self.rect = self.image.get_rect()  # Get rectangle for collision detection
        self.rect.center = (160, 520)  # Start position near bottom center

    def move(self):
        pressed_keys = pygame.key.get_pressed()  # Get current key presses
        if self.rect.left > 0:  # Prevent moving off left edge
            if pressed_keys[K_LEFT]:
                self.rect.move_ip(-5, 0)  # Move left
        if self.rect.right < SCREEN_WIDTH:  # Prevent moving off right edge
            if pressed_keys[K_RIGHT]:
                self.rect.move_ip(5, 0)  # Move right

# Define the Coin class (inherits from Sprite)
class Coin(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pygame.Surface((20, 20))  # Simple square coin
        self.image.fill(YELLOW)  # Coin color
        self.rect = self.image.get_rect()  # Get rectangle for collision detection
        self.rect.center = (random.randint(40, SCREEN_WIDTH - 40), 0)  # Start at random x, top

    def move(self):
        self.rect.move_ip(0, SPEED)  # Move coin downward
        if self.rect.top > SCREEN_HEIGHT:  # If coin goes off screen
            self.kill()  # Remove coin from all groups

# Define yellow color for coins
YELLOW = (255, 255, 0)

# Create sprite instances
P1 = Player()
E1 = Enemy()

# Create sprite groups
enemies = pygame.sprite.Group()
enemies.add(E1)
all_sprites = pygame.sprite.Group()
all_sprites.add(P1, E1)
coins = pygame.sprite.Group()  # Group for coins

# Event to increase speed
INC_SPEED = pygame.USEREVENT + 1
pygame.time.set_timer(INC_SPEED, 1000)  # Increase speed every second

# Event to spawn coins
SPAWN_COIN = pygame.USEREVENT + 2
pygame.time.set_timer(SPAWN_COIN, 2000)  # Spawn coin every 2 seconds

# Game loop
while True:
    # Event handling
    for event in pygame.event.get():
        if event.type == INC_SPEED:
            SPEED += 0.5  # Increase enemy and coin speed
        if event.type == SPAWN_COIN:
            new_coin = Coin()  # Create a new coin
            coins.add(new_coin)  # Add to coins group
            all_sprites.add(new_coin)  # Add to all sprites group
        if event.type == QUIT:  # Exit on window close
            pygame.quit()
            sys.exit()

    # Draw background
    DISPLAYSURF.blit(background, (0, 0))

    # Display scores
    scores = font_small.render(f"Score: {SCORE}", True, BLACK)
    DISPLAYSURF.blit(scores, (10, 10))  # Score in top left
    coin_count = font_small.render(f"Coins: {COINS}", True, BLACK)
    DISPLAYSURF.blit(coin_count, (SCREEN_WIDTH - 100, 10))  # Coins in top right

    # Move and redraw all sprites
    for entity in all_sprites:
        DISPLAYSURF.blit(entity.image, entity.rect)
        entity.move()

    # Check for player-enemy collision
    if pygame.sprite.spritecollideany(P1, enemies):
        pygame.mixer.Sound('crash.wav').play()  # Play crash sound
        time.sleep(0.5)  # Brief pause
        DISPLAYSURF.fill(RED)  # Fill screen with red
        DISPLAYSURF.blit(game_over, (30, 250))  # Show "Game Over"
        pygame.display.update()
        for entity in all_sprites:
            entity.kill()  # Remove all sprites
        time.sleep(2)  # Pause before quitting
        pygame.quit()
        sys.exit()

    # Check for player-coin collision
    collected_coins = pygame.sprite.spritecollide(P1, coins, True)  # True removes coins on collision
    COINS += len(collected_coins)  # Add number of collected coins to total

    # Update display
    pygame.display.update()
    FramePerSec.tick(FPS)  # Cap frame rate at 60 FPS