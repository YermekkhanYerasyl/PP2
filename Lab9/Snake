import pygame
import sys
import random
from pygame.locals import *

# Initialize Pygame
pygame.init()

# Set up FPS controller
FPS = 15  # Initial speed
fpsClock = pygame.time.Clock()

# Screen settings
SCREEN_WIDTH = 600
SCREEN_HEIGHT = 400
BLOCK_SIZE = 20  # Size of each block (snake and food)

# Define colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
YELLOW = (255, 255, 0)

# Set up the display
DISPLAYSURF = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Snake Game")

# Font for text rendering
font = pygame.font.SysFont("Verdana", 20)

# Game variables
SCORE = 0
LEVEL = 1
FOOD_PER_LEVEL = 3  # Number of food required to level up
SPEED_INCREMENT = 5  # Speed increase per level
INITIAL_FPS = 15
food_timer = 0  # Timer for disappearing food
food_duration = 100  # Food disappears after 100 frames

game_started = False  # Track if the game has started

# Snake class
class Snake:
    def __init__(self):
        self.position = [SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2]
        self.body = [self.position.copy()]
        self.direction = None  # Initially, the snake does not move
        self.change_to = None
    
    def change_direction(self):
        if self.change_to:
            if self.change_to == "UP" and self.direction != "DOWN":
                self.direction = "UP"
            if self.change_to == "DOWN" and self.direction != "UP":
                self.direction = "DOWN"
            if self.change_to == "LEFT" and self.direction != "RIGHT":
                self.direction = "LEFT"
            if self.change_to == "RIGHT" and self.direction != "LEFT":
                self.direction = "RIGHT"

    def move(self, food_pos):
        if self.direction:
            if self.direction == "UP":
                self.position[1] -= BLOCK_SIZE
            if self.direction == "DOWN":
                self.position[1] += BLOCK_SIZE
            if self.direction == "LEFT":
                self.position[0] -= BLOCK_SIZE
            if self.direction == "RIGHT":
                self.position[0] += BLOCK_SIZE

            self.body.insert(0, self.position.copy())
        
            if self.position == food_pos:
                return True
            else:
                self.body.pop()
                return False
        return False

    def check_collision(self):
        if self.position[0] < 0 or self.position[0] >= SCREEN_WIDTH or self.position[1] < 0 or self.position[1] >= SCREEN_HEIGHT:
            return True
        for segment in self.body[1:]:
            if self.position == segment:
                return True
        return False

# Food class
class Food:
    def __init__(self, snake):
        self.types = [(RED, 1), (BLUE, 2), (YELLOW, 3)]  # Different food types with weights
        self.spawn_food(snake)
        
    def spawn_food(self, snake):
        global food_timer
        while True:
            x = random.randrange(0, SCREEN_WIDTH, BLOCK_SIZE)
            y = random.randrange(0, SCREEN_HEIGHT, BLOCK_SIZE)
            if [x, y] not in snake.body:
                self.position = [x, y]
                self.color, self.points = random.choices(self.types, weights=[60, 30, 10])[0]  # Weighted choice
                food_timer = 0  # Reset food timer
                break

# Reset game state
def reset_game():
    global SCORE, LEVEL, FPS, snake, food, game_started
    SCORE = 0
    LEVEL = 1
    FPS = INITIAL_FPS
    snake = Snake()
    food = Food(snake)
    game_started = False  # Reset game start flag
    return snake, food

# Initialize game objects
snake = Snake()
food = Food(snake)

game_active = True
while True:
    for event in pygame.event.get():
        if event.type == QUIT:
            pygame.quit()
            sys.exit()
        elif event.type == KEYDOWN:
            if game_active:
                if event.key in (K_UP, K_DOWN, K_LEFT, K_RIGHT):
                    if not game_started:
                        game_started = True  # Start game on first movement
                    if event.key == K_UP:
                        snake.change_to = "UP"
                    elif event.key == K_DOWN:
                        snake.change_to = "DOWN"
                    elif event.key == K_LEFT:
                        snake.change_to = "LEFT"
                    elif event.key == K_RIGHT:
                        snake.change_to = "RIGHT"
            else:
                if event.key == K_r:
                    snake, food = reset_game()
                    game_active = True

    if game_active and game_started:
        snake.change_direction()
        food_eaten = snake.move(food.position)
        if food_eaten:
            SCORE += food.points
            food.spawn_food(snake)
            if SCORE % FOOD_PER_LEVEL == 0:
                LEVEL += 1
                FPS += SPEED_INCREMENT
        
        food_timer += 1
        if food_timer >= food_duration:
            food.spawn_food(snake)

        if snake.check_collision():
            game_active = False

    DISPLAYSURF.fill(BLACK)
    if game_active:
        for pos in snake.body:
            pygame.draw.rect(DISPLAYSURF, GREEN, (pos[0], pos[1], BLOCK_SIZE, BLOCK_SIZE))
        pygame.draw.rect(DISPLAYSURF, food.color, (food.position[0], food.position[1], BLOCK_SIZE, BLOCK_SIZE))
    else:
        game_over_text = font.render(f"Game Over! Score: {SCORE}", True, RED)
        restart_text = font.render("Press R to Restart", True, WHITE)
        DISPLAYSURF.blit(game_over_text, (SCREEN_WIDTH // 4, SCREEN_HEIGHT // 2 - 20))
        DISPLAYSURF.blit(restart_text, (SCREEN_WIDTH // 4, SCREEN_HEIGHT // 2 + 20))

    score_text = font.render(f"Score: {SCORE}", True, WHITE)
    level_text = font.render(f"Level: {LEVEL}", True, WHITE)
    DISPLAYSURF.blit(score_text, (10, 10))
    DISPLAYSURF.blit(level_text, (SCREEN_WIDTH - 100, 10))

    pygame.display.update()
    fpsClock.tick(FPS)